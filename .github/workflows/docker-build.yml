name: Docker Build and Push

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # we'll lowercase it at runtime
  CARGO_TERM_COLOR: always

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # Only run if CI workflow succeeded and was triggered by a push
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository (same commit as CI)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Normalize image name (lowercase for GHCR)
        run: echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >> "$GITHUB_ENV"

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # No sqlx prepare here â€” .sqlx is committed and SQLX_OFFLINE is used at build time

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}
          provenance: true

      - name: Generate deployment summary
        run: |
          {
            echo "## ðŸš€ Docker Image Built Successfully"
            echo
            echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}\`"
            echo
            echo "**Tags:**"
            echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | sed 's/^/- `/' | sed 's/$/`/'
            echo
            echo "**Pull command:**"
            echo '```bash'
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:latest"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"